[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Inward",
  "enabled": 1,
  "modified": "2025-07-22 17:43:03.548423",
  "module": "inwards",
  "name": "Inward Deduction - Populate Deduction Types",
  "script": "frappe.ui.form.on('Inward', {\n    refresh: function(frm) {\n        setup_deduction_types(frm);\n    }\n});\n\nfrappe.ui.form.on('Inward Deduction', {\n    deductions_add: function(frm, cdt, cdn) {\n        setup_deduction_types(frm);\n    },\n    \n    deduction_type: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.deduction_type) {\n            frappe.call({\n                method: 'frappe.desk.form.load.getdoc',\n                args: {\n                    doctype: 'App Settings',\n                    name: 'App Settings'\n                },\n                callback: function(r) {\n                    if (r.docs && r.docs[0] && r.docs[0].default_deduction_types) {\n                        r.docs[0].default_deduction_types.forEach(function(settings_row) {\n                            if (settings_row.deduction_name === row.deduction_type && settings_row.is_active) {\n                                frappe.model.set_value(cdt, cdn, 'amount', settings_row.default_amount || 0);\n                                frappe.model.set_value(cdt, cdn, 'description', settings_row.description || '');\n                            }\n                        });\n                    }\n                }\n            });\n        }\n    }\n});\n\nfunction setup_deduction_types(frm) {\n    frappe.call({\n        method: 'frappe.desk.form.load.getdoc',\n        args: {\n            doctype: 'App Settings',\n            name: 'App Settings'\n        },\n        callback: function(r) {\n            if (r.docs && r.docs[0] && r.docs[0].default_deduction_types) {\n                let options = [];\n                r.docs[0].default_deduction_types.forEach(function(row) {\n                    if (row.is_active) {\n                        options.push(row.deduction_name);\n                    }\n                });\n                \n                if (options.length > 0) {\n                    frm.fields_dict.deductions.grid.update_docfield_property('deduction_type', 'options', options.join('\\n'));\n                    frm.fields_dict.deductions.grid.refresh();\n                }\n            }\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sauda",
  "enabled": 1,
  "modified": "2025-07-26 16:19:56.333171",
  "module": null,
  "name": "Sauda-Basic-Calculation",
  "script": "frappe.ui.form.on('Sauda', {\n    refresh: function(frm) {\n        calculate_pending_values(frm);\n    },\n    \n    validate: function(frm) {\n        // Client-side validation before save/submit\n        validate_required_values(frm);\n    },\n    \n    expected_quantity: function(frm) {\n        calculate_total_amount(frm);\n        calculate_pending_values(frm);\n    },\n    \n    sauda_rate: function(frm) {\n        calculate_total_amount(frm);\n        calculate_pending_values(frm);\n    },\n    \n    total_amount: function(frm) {\n        calculate_pending_values(frm);\n    },\n    \n    booking_date: function(frm) {\n        calculate_dates(frm);\n    },\n    \n    delivery_duration: function(frm) {\n        calculate_dates(frm);\n    },\n    \n    payment_duration: function(frm) {\n        calculate_dates(frm);\n    }\n});\n\nfunction validate_required_values(frm) {\n    // Prevent submission with zero or invalid values\n    if (!frm.doc.expected_quantity || frm.doc.expected_quantity <= 0) {\n        frappe.throw(__(\"Expected Quantity must be greater than 0\"));\n        return false;\n    }\n    \n    if (!frm.doc.sauda_rate || frm.doc.sauda_rate <= 0) {\n        frappe.throw(__(\"Sauda Rate must be greater than 0\"));\n        return false;\n    }\n    \n    if (!frm.doc.delivery_duration || frm.doc.delivery_duration <= 0) {\n        frappe.throw(__(\"Delivery Duration must be greater than 0\"));\n        return false;\n    }\n    \n    if (!frm.doc.payment_duration || frm.doc.payment_duration <= 0) {\n        frappe.throw(__(\"Payment Duration must be greater than 0\"));\n        return false;\n    }\n    \n    return true;\n}\n\nfunction calculate_total_amount(frm) {\n    if (frm.doc.expected_quantity >= 0 && frm.doc.sauda_rate >= 0) {\n        let total = frm.doc.expected_quantity * frm.doc.sauda_rate;\n        frm.set_value('total_amount', total);\n    }\n}\n\nfunction calculate_dates(frm) {\n    let booking_date = frm.doc.booking_date;\n    let delivery_duration = frm.doc.delivery_duration;\n    let payment_duration = frm.doc.payment_duration;\n    \n    if (booking_date) {\n        if (delivery_duration > 0) {\n            let delivery_end_date = frappe.datetime.add_days(booking_date, delivery_duration);\n            frm.set_value('delivery_end_date', delivery_end_date);\n        }\n        \n        if (payment_duration > 0) {\n            let payment_end_date = frappe.datetime.add_days(booking_date, payment_duration);\n            frm.set_value('payment_end_date', payment_end_date);\n        }\n    }\n}\n\nfunction calculate_pending_values(frm) {\n    let is_editable = frm.is_new() || frm.doc.docstatus == 0;\n    \n    if (frm.doc.expected_quantity >= 0 && is_editable) {\n        frm.set_value('pending_quantity', frm.doc.expected_quantity);\n    }\n    \n    if (frm.doc.total_amount >= 0 && is_editable) {\n        frm.set_value('pending_total_amount', frm.doc.total_amount);\n    }\n    \n    frm.refresh_fields(['pending_quantity', 'pending_total_amount']);\n}",
  "view": "Form"
 }
]