[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Inward",
  "enabled": 1,
  "modified": "2025-07-22 17:43:03.548423",
  "module": "inwards",
  "name": "Inward Deduction - Populate Deduction Types",
  "script": "frappe.ui.form.on('Inward', {\n    refresh: function(frm) {\n        setup_deduction_types(frm);\n    }\n});\n\nfrappe.ui.form.on('Inward Deduction', {\n    deductions_add: function(frm, cdt, cdn) {\n        setup_deduction_types(frm);\n    },\n    \n    deduction_type: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.deduction_type) {\n            frappe.call({\n                method: 'frappe.desk.form.load.getdoc',\n                args: {\n                    doctype: 'App Settings',\n                    name: 'App Settings'\n                },\n                callback: function(r) {\n                    if (r.docs && r.docs[0] && r.docs[0].default_deduction_types) {\n                        r.docs[0].default_deduction_types.forEach(function(settings_row) {\n                            if (settings_row.deduction_name === row.deduction_type && settings_row.is_active) {\n                                frappe.model.set_value(cdt, cdn, 'amount', settings_row.default_amount || 0);\n                                frappe.model.set_value(cdt, cdn, 'description', settings_row.description || '');\n                            }\n                        });\n                    }\n                }\n            });\n        }\n    }\n});\n\nfunction setup_deduction_types(frm) {\n    frappe.call({\n        method: 'frappe.desk.form.load.getdoc',\n        args: {\n            doctype: 'App Settings',\n            name: 'App Settings'\n        },\n        callback: function(r) {\n            if (r.docs && r.docs[0] && r.docs[0].default_deduction_types) {\n                let options = [];\n                r.docs[0].default_deduction_types.forEach(function(row) {\n                    if (row.is_active) {\n                        options.push(row.deduction_name);\n                    }\n                });\n                \n                if (options.length > 0) {\n                    frm.fields_dict.deductions.grid.update_docfield_property('deduction_type', 'options', options.join('\\n'));\n                    frm.fields_dict.deductions.grid.refresh();\n                }\n            }\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sauda",
  "enabled": 1,
  "modified": "2025-08-19 13:06:40.287377",
  "module": null,
  "name": "Sauda-Basic-Calculation",
  "script": "\nfrappe.ui.form.on('Sauda', {\n    refresh: function(frm) {\n        // Only calculate pending values for NEW documents\n        if (frm.is_new()) {\n            calculate_pending_values(frm);\n        }\n    },\n    \n    validate: function(frm) {\n        // Client-side validation before save/submit\n        validate_required_values(frm);\n    },\n    \n    expected_quantity: function(frm) {\n        calculate_total_amount(frm);\n        // Only update pending values for NEW documents\n        if (frm.is_new()) {\n            calculate_pending_values(frm);\n        }\n    },\n    \n    sauda_rate: function(frm) {\n        calculate_total_amount(frm);\n        // Only update pending values for NEW documents\n        if (frm.is_new()) {\n            calculate_pending_values(frm);\n        }\n    },\n    \n    total_amount: function(frm) {\n        // Only update pending values for NEW documents\n        if (frm.is_new()) {\n            calculate_pending_values(frm);\n        }\n    },\n    \n    booking_date: function(frm) {\n        calculate_dates(frm);\n    },\n    \n    delivery_duration: function(frm) {\n        calculate_dates(frm);\n    },\n    \n    payment_duration: function(frm) {\n        calculate_dates(frm);\n    }\n});\n\nfunction validate_required_values(frm) {\n    // Prevent submission with zero or invalid values\n    if (!frm.doc.expected_quantity || frm.doc.expected_quantity <= 0) {\n        frappe.throw(__(\"Expected Quantity must be greater than 0\"));\n        return false;\n    }\n    \n    if (!frm.doc.sauda_rate || frm.doc.sauda_rate <= 0) {\n        frappe.throw(__(\"Sauda Rate must be greater than 0\"));\n        return false;\n    }\n    \n    if (!frm.doc.delivery_duration || frm.doc.delivery_duration <= 0) {\n        frappe.throw(__(\"Delivery Duration must be greater than 0\"));\n        return false;\n    }\n    \n    if (!frm.doc.payment_duration || frm.doc.payment_duration <= 0) {\n        frappe.throw(__(\"Payment Duration must be greater than 0\"));\n        return false;\n    }\n    \n    return true;\n}\n\nfunction calculate_total_amount(frm) {\n    // Use KG to Quintal conversion like the other script\n    if (frm.doc.expected_quantity >= 0 && frm.doc.sauda_rate >= 0) {\n        let total = (frm.doc.expected_quantity / 100) * frm.doc.sauda_rate;\n        frm.set_value('total_amount', total);\n    }\n}\n\nfunction calculate_dates(frm) {\n    let booking_date = frm.doc.booking_date;\n    let delivery_duration = frm.doc.delivery_duration;\n    let payment_duration = frm.doc.payment_duration;\n    \n    if (booking_date) {\n        if (delivery_duration > 0) {\n            let delivery_end_date = frappe.datetime.add_days(booking_date, delivery_duration);\n            frm.set_value('delivery_end_date', delivery_end_date);\n        }\n        \n        if (payment_duration > 0) {\n            let payment_end_date = frappe.datetime.add_days(booking_date, payment_duration);\n            frm.set_value('payment_end_date', payment_end_date);\n        }\n    }\n}\n\nfunction calculate_pending_values(frm) {\n    // ONLY set initial pending values for NEW documents\n    if (frm.is_new() && frm.doc.expected_quantity >= 0) {\n        frm.set_value('pending_quantity', frm.doc.expected_quantity);\n    }\n    \n    if (frm.is_new() && frm.doc.total_amount >= 0) {\n        frm.set_value('pending_total_amount', frm.doc.total_amount);\n    }\n    \n    frm.refresh_fields(['pending_quantity', 'pending_total_amount']);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Inward",
  "enabled": 1,
  "modified": "2025-08-26 13:56:46.395759",
  "module": null,
  "name": "Inward Item Amount Calculation",
  "script": "\n// Auto-populate fields when Sauda is selected\nfrappe.ui.form.on('Inward', {\n    sauda: function(frm) {\n        if (frm.doc.sauda) {\n            // Fetch Sauda document and populate fields\n            frappe.db.get_doc('Sauda', frm.doc.sauda).then(function(sauda_doc) {\n                frm.set_value('customer', sauda_doc.customer);\n                frm.set_value('warehouse', sauda_doc.warehouse);\n                frm.set_value('product', sauda_doc.product);\n                frm.set_value('company', sauda_doc.company);\n                frm.set_value('broker', sauda_doc.broker);\n            });\n        } else {\n            // Clear fields if Sauda is cleared\n            frm.set_value('customer', '');\n            frm.set_value('warehouse', '');\n            frm.set_value('product', '');\n            frm.set_value('company', '');\n            frm.set_value('broker', '');\n        }\n    },\n    \n    // Update Sauda pending quantities after Inward is saved\n    after_save: function(frm) {\n        if (frm.doc.sauda && frm.doc.total_arrival_weight && frm.doc.total_amount) {\n            update_sauda_pending_quantities(frm);\n        }\n    },\n    \n    cgst_percent: function(frm) {\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    sgst_percent: function(frm) {\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    igst_percent: function(frm) {\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    tcs_percent: function(frm) {\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    tds_percent: function(frm) {\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    broker_commission_percent: function(frm) {\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    }\n});\n\n// Calculate item_amount for each row in inward_items child table\nfrappe.ui.form.on('Inward Item Detail', {\n    item_arrival_weight: function(frm, cdt, cdn) {\n        calculate_item_amount(frm, cdt, cdn);\n        calculate_parent_totals(frm);\n        calculate_financial_totals(frm);\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    item_rate: function(frm, cdt, cdn) {\n        calculate_item_amount(frm, cdt, cdn);\n        calculate_parent_totals(frm);\n        calculate_financial_totals(frm);\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    item_gross_weight: function(frm, cdt, cdn) {\n        calculate_parent_totals(frm);\n        calculate_financial_totals(frm);\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    bags: function(frm, cdt, cdn) {\n        calculate_parent_totals(frm);\n    },\n    \n    // Trigger when rows are added or removed\n    inward_items_add: function(frm, cdt, cdn) {\n        calculate_parent_totals(frm);\n        calculate_financial_totals(frm);\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    inward_items_remove: function(frm, cdt, cdn) {\n        calculate_parent_totals(frm);\n        calculate_financial_totals(frm);\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    }\n});\n\n// Calculate deductions when deductions child table changes\nfrappe.ui.form.on('Inward Deduction', {\n    amount: function(frm, cdt, cdn) {\n        calculate_deduction_totals(frm);\n        calculate_financial_totals(frm);\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    // Trigger when deduction rows are added or removed\n    deductions_add: function(frm, cdt, cdn) {\n        calculate_deduction_totals(frm);\n        calculate_financial_totals(frm);\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    deductions_remove: function(frm, cdt, cdn) {\n        calculate_deduction_totals(frm);\n        calculate_financial_totals(frm);\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    }\n});\n\nfunction calculate_item_amount(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n    \n    // Get values, default to 0 if empty\n    let arrival_weight = flt(row.item_arrival_weight) || 0;\n    let rate = flt(row.item_rate) || 0;\n    \n    // Calculate: item_amount = (item_arrival_weight / 100) × item_rate\n    let item_amount = (arrival_weight / 100) * rate;\n    \n    // Set the calculated value\n    frappe.model.set_value(cdt, cdn, 'item_amount', item_amount);\n    \n    // Refresh the field to show updated value\n    frm.refresh_field('inward_items');\n}\n\nfunction calculate_parent_totals(frm) {\n    let total_gross_weight = 0;\n    let total_bags = 0;\n    let total_arrival_weight = 0;\n    let total_amount = 0;\n    \n    // Loop through all rows in inward_items child table\n    if (frm.doc.inward_items) {\n        frm.doc.inward_items.forEach(function(row) {\n            total_gross_weight += flt(row.item_gross_weight) || 0;\n            total_bags += flt(row.bags) || 0;\n            total_arrival_weight += flt(row.item_arrival_weight) || 0;\n            total_amount += flt(row.item_amount) || 0;\n        });\n    }\n    \n    // Set parent totals\n    frm.set_value('total_gross_weight', total_gross_weight);\n    frm.set_value('total_bags', total_bags);\n    frm.set_value('total_arrival_weight', total_arrival_weight);\n    frm.set_value('total_amount', total_amount);\n}\n\nfunction calculate_deduction_totals(frm) {\n    let total_deductions = 0;\n    \n    // Loop through all rows in deductions child table\n    if (frm.doc.deductions) {\n        frm.doc.deductions.forEach(function(row) {\n            total_deductions += flt(row.amount) || 0;\n        });\n    }\n    \n    // Set total deductions\n    frm.set_value('total_deductions', total_deductions);\n}\n\nfunction calculate_financial_totals(frm) {\n    let total_amount = flt(frm.doc.total_amount) || 0;\n    let total_deductions = flt(frm.doc.total_deductions) || 0;\n    \n    // Calculate sub_total = total_amount - total_deductions\n    let sub_total = total_amount - total_deductions;\n    \n    // Set sub total\n    frm.set_value('sub_total', sub_total);\n}\n\nfunction calculate_tax_totals(frm) {\n    let sub_total = flt(frm.doc.sub_total) || 0;\n    \n    // Get tax percentages\n    let cgst_percent = flt(frm.doc.cgst_percent) || 0;\n    let sgst_percent = flt(frm.doc.sgst_percent) || 0;\n    let igst_percent = flt(frm.doc.igst_percent) || 0;\n    let tcs_percent = flt(frm.doc.tcs_percent) || 0;\n    let tds_percent = flt(frm.doc.tds_percent) || 0;\n    let broker_commission_percent = flt(frm.doc.broker_commission_percent) || 0;\n    \n    // Calculate tax amounts\n    let cgst_amount = sub_total * cgst_percent / 100;\n    let sgst_amount = sub_total * sgst_percent / 100;\n    let igst_amount = sub_total * igst_percent / 100;\n    let total_gst_amount = sub_total * (cgst_percent + sgst_percent + igst_percent) / 100;\n    let tcs_amount = sub_total * tcs_percent / 100;\n    let tds_amount = sub_total * tds_percent / 100;\n    let broker_commission_amount = sub_total * broker_commission_percent / 100;\n    \n    // Set tax amounts\n    frm.set_value('cgst_amount', cgst_amount);\n    frm.set_value('sgst_amount', sgst_amount);\n    frm.set_value('igst_amount', igst_amount);\n    frm.set_value('total_gst_amount', total_gst_amount);\n    frm.set_value('tcs_amount', tcs_amount);\n    frm.set_value('tds_amount', tds_amount);\n    frm.set_value('broker_commission_amount', broker_commission_amount);\n}\n\nfunction calculate_net_total(frm) {\n    let sub_total = flt(frm.doc.sub_total) || 0;\n    let total_gst_amount = flt(frm.doc.total_gst_amount) || 0;\n    let tcs_amount = flt(frm.doc.tcs_amount) || 0;\n    let tds_amount = flt(frm.doc.tds_amount) || 0;\n    \n    // Calculate net_total = sub_total + total_gst_amount + tcs_amount - tds_amount\n    let net_total = sub_total + total_gst_amount + tcs_amount - tds_amount;\n    \n    // Set net total\n    frm.set_value('net_total', net_total);\n}\n\nfunction update_sauda_pending_quantities(frm) {\n    frappe.db.get_doc('Sauda', frm.doc.sauda).then(function(sauda_doc) {\n        let current_pending_quantity = flt(sauda_doc.pending_quantity) || 0;\n        let current_pending_amount = flt(sauda_doc.pending_total_amount) || 0;\n        \n        let inward_quantity = flt(frm.doc.total_arrival_weight) || 0;\n        let inward_amount = flt(frm.doc.total_amount) || 0;\n        \n        let new_pending_quantity = Math.max(0, current_pending_quantity - inward_quantity);\n        let new_pending_amount = Math.max(0, current_pending_amount - inward_amount);\n        \n        // Use frappe.call for more reliable updates\n        frappe.call({\n            method: 'frappe.client.set_value',\n            args: {\n                doctype: 'Sauda',\n                name: frm.doc.sauda,\n                fieldname: {\n                    'pending_quantity': new_pending_quantity,\n                    'pending_total_amount': new_pending_amount\n                }\n            },\n            callback: function(response) {\n                frappe.show_alert({\n                    message: 'Sauda pending quantities updated successfully',\n                    indicator: 'green'\n                });\n                \n                // Force refresh any open Sauda forms\n                frappe.ui.form.refresh_form_if_exists('Sauda', frm.doc.sauda);\n            }\n        });\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Inward",
  "enabled": 1,
  "modified": "2025-07-30 20:52:23.990105",
  "module": null,
  "name": "Inward Deduction Auto-calculations",
  "script": "\nfrappe.ui.form.on('Inward', {\n    refresh: function(frm) {\n        set_deduction_options(frm);\n    },\n    \n    onload: function(frm) {\n        set_deduction_options(frm);\n    }\n});\n\nfrappe.ui.form.on('Inward Deduction', {\n    deduction_type: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        \n        if (row.deduction_type) {\n            fetch_master_values(frm, cdt, cdn, row.deduction_type);\n        }\n    },\n    \n    actual_value: function(frm, cdt, cdn) {\n        calculate_amounts(frm, cdt, cdn);\n        calculate_total_deductions(frm);\n        // Trigger existing sub_total calculation\n        calculate_financial_totals(frm);\n    },\n    \n    required_value: function(frm, cdt, cdn) {\n        calculate_amounts(frm, cdt, cdn);\n        calculate_total_deductions(frm);\n        calculate_financial_totals(frm);\n    },\n    \n    charges_per_unit: function(frm, cdt, cdn) {\n        calculate_amounts(frm, cdt, cdn);\n        calculate_total_deductions(frm);\n        calculate_financial_totals(frm);\n    },\n    \n    deduction_amount: function(frm, cdt, cdn) {\n        calculate_total_deductions(frm);\n        calculate_financial_totals(frm);\n    },\n    \n    deductions_add: function(frm) {\n        // Delay to ensure row is added\n        setTimeout(() => {\n            set_deduction_options(frm);\n            calculate_total_deductions(frm);\n            calculate_financial_totals(frm);\n        }, 100);\n    },\n    \n    deductions_remove: function(frm) {\n        setTimeout(() => {\n            calculate_total_deductions(frm);\n            calculate_financial_totals(frm);\n        }, 100);\n    }\n});\n\nfunction set_deduction_options(frm) {\n    frappe.call({\n        method: 'frappe.desk.form.load.getdoc',\n        args: {\n            doctype: 'App Settings',\n            name: 'App Settings'\n        },\n        callback: function(r) {\n            if (r.docs && r.docs[0] && r.docs[0].default_deduction_types) {\n                let types = r.docs[0].default_deduction_types.filter(t => t.is_active === 1);\n                let options = types.map(t => t.deduction_name);\n                \n                // Safer option setting\n                try {\n                    if (frm.fields_dict.deductions && \n                        frm.fields_dict.deductions.grid && \n                        frm.fields_dict.deductions.grid.get_field('deduction_type')) {\n                        \n                        frm.fields_dict.deductions.grid.get_field('deduction_type').df.options = options.join('\\n');\n                        frm.refresh_field('deductions');\n                    }\n                } catch(e) {\n                    console.log('Note: Deduction field not ready yet');\n                }\n            }\n        }\n    });\n}\n\nfunction fetch_master_values(frm, cdt, cdn, deduction_type) {\n    frappe.call({\n        method: 'frappe.desk.form.load.getdoc',\n        args: {\n            doctype: 'App Settings',\n            name: 'App Settings'\n        },\n        callback: function(r) {\n            if (r.docs && r.docs[0] && r.docs[0].default_deduction_types) {\n                let selected = r.docs[0].default_deduction_types.find(\n                    t => t.deduction_name === deduction_type && t.is_active === 1\n                );\n                \n                if (selected) {\n                    frappe.model.set_value(cdt, cdn, 'required_value', selected.required_value || 0);\n                    frappe.model.set_value(cdt, cdn, 'charges_per_unit', selected.charges_per_unit || 0);\n                    \n                    let row = locals[cdt][cdn];\n                    if (row.actual_value) {\n                        calculate_amounts(frm, cdt, cdn);\n                    }\n                    calculate_total_deductions(frm);\n                    calculate_financial_totals(frm);\n                }\n            }\n        }\n    });\n}\n\nfunction calculate_amounts(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n    \n    if (row.actual_value >= 0 && row.required_value >= 0 && row.charges_per_unit >= 0) {\n        let difference = 0;\n        let amount = 0;\n        \n        if (flt(row.actual_value) > flt(row.required_value)) {\n            difference = flt(row.actual_value) - flt(row.required_value);\n            amount = difference * flt(row.charges_per_unit);\n        }\n        \n        frappe.model.set_value(cdt, cdn, 'difference_value', difference);\n        frappe.model.set_value(cdt, cdn, 'deduction_amount', amount);\n    }\n}\n\nfunction calculate_total_deductions(frm) {\n    let total = 0;\n    \n    if (frm.doc.deductions) {\n        frm.doc.deductions.forEach(function(row) {\n            total += flt(row.deduction_amount) || 0;\n        });\n    }\n    \n    frm.set_value('total_deductions', total);\n}\n\n// Make functions available to other scripts\nwindow.calculate_financial_totals = function(frm) {\n    let total_amount = flt(frm.doc.total_amount) || 0;\n    let total_deductions = flt(frm.doc.total_deductions) || 0;\n    \n    let sub_total = total_amount - total_deductions;\n    frm.set_value('sub_total', sub_total);\n};\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sauda",
  "enabled": 1,
  "modified": "2025-08-19 13:06:46.575812",
  "module": null,
  "name": "Sauda Total Amount Calculation",
  "script": "\n// Calculate total_amount when expected_quantity or sauda_rate changes\nfrappe.ui.form.on('Sauda', {\n    expected_quantity: function(frm) {\n        calculate_total_amount(frm);\n    },\n    \n    sauda_rate: function(frm) {\n        calculate_total_amount(frm);\n    }\n});\n\nfunction calculate_total_amount(frm) {\n    // Get values, default to 0 if empty\n    let expected_quantity = flt(frm.doc.expected_quantity) || 0;\n    let sauda_rate = flt(frm.doc.sauda_rate) || 0;\n    \n    // Calculate: total_amount = (expected_quantity / 100) × sauda_rate (KG to Quintal conversion)\n    let total_amount = (expected_quantity / 100) * sauda_rate;\n    \n    // Set the calculated value\n    frm.set_value('total_amount', total_amount);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Inward",
  "enabled": 1,
  "modified": "2025-09-04 19:16:13.946121",
  "module": null,
  "name": "Inward Auto Calculations",
  "script": "\n// ===============================================\n// INWARD DOCTYPE CLIENT SCRIPT - UPDATED\n// ===============================================\n\nfrappe.ui.form.on('Inward', {\n    onload: function(frm) {\n        if (frm.is_new()) {\n            add_default_bag_types(frm);\n            calculate_bag_count(frm, function() {\n                // This runs AFTER bag_type_count is actually set\n                auto_populate_deductions(frm);\n            });\n        }\n    },\n    \n    refresh: function(frm) {\n        // Calculate all totals when form loads\n        calculate_all_totals(frm);\n        if(frm.doc.customer) {\n            frappe.db.get_value('Customer', frm.doc.customer, 'customer_type')\n            .then(r => {\n                if(r.message.customer_type === 'Individual / Farmers') {\n                    frm.set_df_property('vendor_gstin', 'hidden', 1);\n                } else {\n                    frm.set_df_property('vendor_gstin', 'hidden', 0);\n                }\n            });\n        }\n    },\n    \n    // ===========================================\n    // SAUDA SELECTION - AUTO POPULATE\n    // ===========================================\n    sauda: function(frm) {\n        if (frm.doc.sauda) {\n            // Auto-populate fields from selected Sauda\n            frappe.db.get_doc('Sauda', frm.doc.sauda).then(sauda_doc => {\n                frm.set_value('customer', sauda_doc.customer);\n                frm.set_value('warehouse', sauda_doc.warehouse);\n                frm.set_value('product', sauda_doc.product);\n                frm.set_value('broker', sauda_doc.broker);\n                frm.set_value('payment_due_date', sauda_doc.payment_end_date);\n                frm.set_value('gross_weight', sauda_doc.expected_quantity);\n                frm.set_value('rate_per_quintal', sauda_doc.sauda_rate);\n                frm.set_value('vendor_amount', sauda_doc.total_amount);\n                \n                // Fill child table (item_details) rates also\n                if (frm.doc.inward_items && frm.doc.inward_items.length > 0) {\n                    frm.doc.inward_items.forEach(row => {\n                        frappe.model.set_value(row.doctype, row.name, \"item_rate\", sauda_doc.sauda_rate);\n                    });\n                }\n    \n                frm.refresh_field(\"inward_items\");\n                });\n        }\n    },\n    \n    broker: function(frm) {\n        if (frm.doc.broker) {\n            frappe.db.get_value('Broker', frm.doc.broker, 'commission_rate')\n                .then(r => {\n                    if (r.message && r.message.commission_rate) {\n                        frm.set_value('broker_commission_percent', r.message.commission_rate);\n                    }\n                });\n        } else {\n            frm.set_value('broker_commission_percent', 0);\n        }\n    },\n    \n    customer: function(frm) {\n        if (frm.doc.customer) {\n            // Fetch both customer_type and gstin from Customer doctype\n            frappe.db.get_value('Customer', frm.doc.customer, ['customer_type', 'gstin'])\n            .then(r => {\n                if (r.message) {\n                    let customer_type = r.message.customer_type;\n                    let gstin = r.message.gstin;\n\n                    if (customer_type === 'Individual / Farmer') {\n                        frm.set_df_property('vendor_gstin', 'hidden', 1);\n                    } else {\n                        frm.set_df_property('vendor_gstin', 'hidden', 0);\n                        frm.set_value('vendor_gstin', gstin);\n                    }\n                }\n            });\n        }\n    },\n    \n    // Trigger when rate_per_quintal changes manually\n    rate_per_quintal: function(frm) {\n        if (frm.doc.inward_items && frm.doc.inward_items.length > 0) {\n            frm.doc.inward_items.forEach(row => {\n                frappe.model.set_value(row.doctype, row.name, \"item_rate\", frm.doc.rate_per_quintal);\n            });\n            frm.refresh_field(\"inward_items\");\n        }\n    },\n    \n    // bag_type_count: function(frm) {\n    //     auto_populate_deductions(frm);\n    // },\n\n    // ===========================================\n    // TAX PERCENTAGE TRIGGERS\n    // ===========================================\n    cgst_percent: function(frm) { calculate_taxes(frm); },\n    sgst_percent: function(frm) { calculate_taxes(frm); },\n    igst_percent: function(frm) { calculate_taxes(frm); },\n    tcs_percent: function(frm) { calculate_taxes(frm); },\n    tds_percent: function(frm) { calculate_taxes(frm); },\n    broker_commission_percent: function(frm) { calculate_taxes(frm); }\n});\n\n// ===============================================\n// CHILD TABLE: INWARD ITEM DETAIL\n// ===============================================\nfrappe.ui.form.on('Inward Item Detail', {\n    // When child table is modified\n    inward_items_add: function(frm) {\n        calculate_item_totals(frm);\n        calculate_bag_count(frm);\n        auto_populate_deductions(frm, true);\n    },\n    \n    before_inward_items_remove: function(frm, cdt, cdn) {\n        let item_row = locals[cdt][cdn];\n        let deleted_item_index = item_row.idx - 1;\n        frm._deleted_item_index = deleted_item_index;\n    },\n    \n    inward_items_remove: function(frm, cdt, cdn) {\n        calculate_item_totals(frm);\n        calculate_bag_count(frm);\n        if (frm._deleted_item_index !== undefined) {\n            remove_mapped_deduction_rows(frm, frm._deleted_item_index);\n            delete frm._deleted_item_index;\n        }\n    },\n    \n    // Individual item calculations\n    item_arrival_weight: function(frm, cdt, cdn) {\n        calculate_item_amount(frm, cdt, cdn);\n        calculate_item_totals(frm);\n    },\n    \n    item_rate: function(frm, cdt, cdn) {\n        calculate_item_amount(frm, cdt, cdn);\n        calculate_item_totals(frm);\n    },\n    \n    item_gross_weight: function(frm, cdt, cdn) {\n        calculate_item_totals(frm);\n    },\n    \n    bags: function(frm, cdt, cdn) {\n        calculate_item_totals(frm);\n        \n    },\n    \n    item_bags: function(frm, cdt, cdn) {\n        update_deduction_bags_for_item(frm, cdt, cdn);\n        calculate_all_bags_weights(frm, cdt, cdn);\n    },\n    \n    item_bag_type: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        // Auto-fill charges based on selected bag type\n        if (row.item_bag_type) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'App Settings',\n                    name: 'App Settings'\n                },\n                callback: function(response) {\n                    if (response.message && response.message.default_bag_types) {\n                        // Find matching bag type and set charges\n                        response.message.default_bag_types.forEach(function(bag_row) {\n                            if (bag_row.bag_type === row.item_bag_type) {\n                                frappe.model.set_value(cdt, cdn, 'item_charges', bag_row.charges);\n                            }\n                        });\n                    }\n                }\n            });\n        }\n        calculate_all_bags_weights(frm, cdt, cdn);\n    },\n    \n});\n\n// ===============================================\n// CHILD TABLE: INWARD DEDUCTION\n// ===============================================\nfrappe.ui.form.on('Inward Deduction', {\n    deductions_add: function(frm) {\n        calculate_deduction_totals(frm);\n    },\n    \n    deductions_remove: function(frm) {\n        calculate_deduction_totals(frm);\n    },\n    \n    deduction_amount: function(frm) {\n        calculate_deduction_totals(frm);\n    },\n    \n    actual_value: function(frm, cdt, cdn) {\n        calculate_deduction_amount(frm, cdt, cdn);\n    },\n    \n    required_value: function(frm, cdt, cdn) {\n        calculate_deduction_amount(frm, cdt, cdn);\n    }\n});\n\n// ===============================================\n// CHILD TABLE: INWARD PAYMENT\n// ===============================================\nfrappe.ui.form.on('Inward Payment', {\n    inward_payments_add: function(frm) {\n        calculate_payment_totals(frm);\n    },\n    \n    inward_payments_remove: function(frm) {\n        calculate_payment_totals(frm);\n    },\n    \n    payment_amount: function(frm) {\n        calculate_payment_totals(frm);\n    },\n    \n    payment_status: function(frm) {\n        calculate_payment_totals(frm);\n    }\n});\n\n\n// ===============================================\n// CALCULATION FUNCTIONS\n// ===============================================\n\nfunction calculate_item_amount(frm, cdt, cdn) {\n    // Calculate item_amount for individual row\n    let row = locals[cdt][cdn];\n    \n    if (row.item_arrival_weight >= 0 && row.item_rate >= 0) {\n        // KG to Quintal conversion: item_amount = (arrival_weight / 100) * rate\n        row.item_amount = (row.item_arrival_weight / 100) * row.item_rate;\n        frm.refresh_field('inward_items');\n    }\n}\n\nfunction calculate_item_totals(frm) {\n    // Calculate parent totals from inward_items child table\n    let total_gross_weight = 0;\n    let total_bags = 0;\n    let total_arrival_weight = 0;\n    let total_amount = 0;\n    \n    if (frm.doc.inward_items) {\n        frm.doc.inward_items.forEach(function(item) {\n            if (item.item_gross_weight) total_gross_weight += item.item_gross_weight;\n            if (item.item_bags) total_bags += item.item_bags;\n            if (item.item_arrival_weight) total_arrival_weight += item.item_arrival_weight;\n            if (item.item_amount) total_amount += item.item_amount;\n        });\n    }\n    \n    frm.set_value('total_gross_weight', total_gross_weight);\n    frm.set_value('total_bags', total_bags);\n    frm.set_value('total_arrival_weight', total_arrival_weight);\n    frm.set_value('total_amount', total_amount);\n    \n    // Trigger dependent calculations\n    calculate_sub_total(frm);\n}\n\nfunction calculate_deduction_totals(frm) {\n    // Calculate total_deductions from deductions child table\n    let total_deductions = 0;\n    \n    if (frm.doc.deductions) {\n        frm.doc.deductions.forEach(function(deduction) {\n            if (deduction.deduction_amount) {\n                total_deductions += deduction.deduction_amount;\n            }\n        });\n    }\n    \n    frm.set_value('total_deductions', total_deductions);\n    \n    // Trigger dependent calculations\n    calculate_sub_total(frm);\n}\n\nfunction calculate_sub_total(frm) {\n    // Calculate sub_total = total_amount - total_deductions\n    let sub_total = (frm.doc.total_amount || 0) - (frm.doc.total_deductions || 0);\n    frm.set_value('sub_total', sub_total);\n    \n    // Trigger tax calculations\n    calculate_taxes(frm);\n}\n\nfunction calculate_taxes(frm) {\n    // Calculate all tax amounts based on sub_total\n    let sub_total = frm.doc.sub_total || 0;\n    let total_gross_weight = frm.doc.total_gross_weight || 0;\n    \n    // GST Calculation\n    let cgst_percent = frm.doc.cgst_percent || 0;\n    let sgst_percent = frm.doc.sgst_percent || 0;\n    let igst_percent = frm.doc.igst_percent || 0;\n    let total_gst_amount = sub_total * (cgst_percent + sgst_percent + igst_percent) / 100;\n    \n    // TCS Calculation\n    let tcs_percent = frm.doc.tcs_percent || 0;\n    let tcs_amount = sub_total * tcs_percent / 100;\n    \n    // TDS Calculation\n    let tds_percent = frm.doc.tds_percent || 0;\n    let tds_amount = sub_total * tds_percent / 100;\n    \n    // Broker Commission Calculation (for records only)\n    let broker_commission_percent = frm.doc.broker_commission_percent || 0;\n    let broker_commission_amount = total_gross_weight * broker_commission_percent / 100;\n    \n    // Set calculated values\n    frm.set_value('total_gst_amount', total_gst_amount);\n    frm.set_value('tcs_amount', tcs_amount);\n    frm.set_value('tds_amount', tds_amount);\n    frm.set_value('broker_commission_amount', broker_commission_amount);\n    \n    // Calculate final net_total\n    calculate_net_total(frm);\n}\n\nfunction calculate_net_total(frm) {\n    // Calculate net_total = sub_total + total_gst_amount + tcs_amount - tds_amount\n    let sub_total = frm.doc.sub_total || 0;\n    let total_gst_amount = frm.doc.total_gst_amount || 0;\n    let tcs_amount = frm.doc.tcs_amount || 0;\n    let tds_amount = frm.doc.tds_amount || 0;\n    \n    let net_total = sub_total + total_gst_amount + tcs_amount - tds_amount;\n    frm.set_value('net_total', net_total);\n    \n    // Trigger payment calculations\n    calculate_payment_totals(frm);\n}\n\nfunction calculate_payment_totals(frm) {\n    // Calculate payment summary from inward_payments child table\n    let total_amount_paid = 0;\n    let last_payment_date = null;\n    let has_pending_payments = false;\n    let has_completed_payments = false;\n    \n    if (frm.doc.inward_payments) {\n        frm.doc.inward_payments.forEach(function(payment) {\n            // Only count success payments in total_amount_paid\n            if (payment.payment_status === 'success' && payment.payment_amount) {\n                total_amount_paid += payment.payment_amount;\n                has_completed_payments = true;\n                \n                // Track latest payment date\n                if (payment.payment_date) {\n                    if (!last_payment_date || payment.payment_date > last_payment_date) {\n                        last_payment_date = payment.payment_date;\n                    }\n                }\n            }\n            \n            // Check for pending payments\n            if (payment.payment_status === 'pending') {\n                has_pending_payments = true;\n            }\n        });\n    }\n    \n    // Calculate pending amount\n    let net_total = frm.doc.net_total || 0;\n    let total_amount_pending = net_total - total_amount_paid;\n    \n    // Determine overall payment status using new status names\n    let inward_payment_status = 'pending';\n    if (total_amount_paid >= net_total) {\n        inward_payment_status = 'success';\n    } else if (total_amount_paid > 0) {\n        inward_payment_status = 'processing';\n    }\n    \n    // Set calculated values\n    frm.set_value('total_amount_paid', total_amount_paid);\n    frm.set_value('total_amount_pending', Math.max(0, total_amount_pending));\n    frm.set_value('inward_payment_status', inward_payment_status);\n    frm.set_value('last_payment_date', last_payment_date);\n}\n\nfunction calculate_all_totals(frm) {\n    // Master function to recalculate everything\n    calculate_item_totals(frm);\n    calculate_deduction_totals(frm);\n    calculate_payment_totals(frm);\n}\n\n\nfunction calculate_all_bags_weights(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n    \n    // Calculate Average weight\n    let average_weight_per_bag = frm.doc.gross_weight/frm.doc.inward_total_bags;\n    \n    \n    // Calculate total bag weight for each bag\n    let deduct_bag_weight = row.item_bags * row.item_charges;\n    \n\n    // Calculate gross weight for each bag\n    let item_gross_weight = row.item_bags * average_weight_per_bag;\n    \n    frappe.model.set_value(cdt, cdn, 'item_gross_weight',item_gross_weight);\n    \n    frappe.model.set_value(cdt, cdn, 'item_deduct_weight', deduct_bag_weight);\n    \n\n    // Calculate arrival weight\n    // Arrival Weight = (No of bags × Average weight per bag) - Deduct weight\n    if (row.item_bags) {\n        let item_arrival_weight = (row.item_bags * average_weight_per_bag) - deduct_bag_weight;\n        frappe.model.set_value(cdt, cdn, 'item_arrival_weight', item_arrival_weight);\n    }\n\n    frm.refresh_field('items');\n}\n\nfunction add_default_bag_types(frm) {\n    // Fetch App Settings document using client-side call\n    frappe.call({\n        method: 'frappe.client.get',\n        args: {\n            doctype: 'App Settings',\n            name: 'App Settings' // Assuming single document, adjust name if different\n        },\n        callback: function(response) {\n            if (response.message) {\n                let app_settings = response.message;\n                \n                // Check if default bag types child table exists\n                if (app_settings.default_bag_types && app_settings.default_bag_types.length > 0) {\n                    frm.clear_table('inward_items');\n                    // Add each default bag type to the child table\n                    app_settings.default_bag_types.forEach(function(bag_type_row) {\n                        let child_row = frm.add_child('inward_items');\n                        \n                        // Only set bag type and charges\n                        child_row.item_bag_type = bag_type_row.bag_type;\n                        child_row.item_charges = bag_type_row.charges;\n                    });\n                    \n                    // Refresh the child table to show the new rows\n                    frm.refresh_field('inward_items');\n                }\n            }\n        },\n    });\n}\n\nfunction calculate_bag_count(frm, callback) {\n    let count = frm.doc.inward_items ? frm.doc.inward_items.length : 0;\n    frm.set_value('bag_type_count', count).then(function() {\n        if (callback) callback();\n    });\n}\n\nfunction auto_populate_deductions(frm, add_only_for_new_item = false) {\n    frappe.call({\n        method: 'frappe.client.get',\n        args: {\n            doctype: 'App Settings'\n        },\n        callback: function(r) {\n            if (r.message && r.message.default_deduction_types) {\n                let deduction_types = r.message.default_deduction_types;\n                let bag_type_count = frm.doc.inward_items.length;\n                \n                if (add_only_for_new_item) {\n                    // Rebuild table with proper order\n                    let existing_deductions = [...frm.doc.deductions];\n                    let new_item_index = bag_type_count - 1;\n                    \n                    // Clear table first\n                    frm.clear_table('deductions');\n                    \n                    // Filter multiple deductions\n                    let multiple_deductions = deduction_types.filter(function(deduction_type) {\n                        return deduction_type.deduction_category === 'multiple';\n                    });\n                    \n                    // Rebuild table with proper mapping\n                    multiple_deductions.forEach(function(deduction_type, type_index) {\n                        for (let item_index = 0; item_index < bag_type_count; item_index++) {\n                            let row = frm.add_child('deductions');\n                            row.deduction_type = deduction_type.deduction_name;\n                            row.required_value = deduction_type.required_value;\n                            \n                            if (deduction_type.deduction_name === 'Damage') {\n                                row.charges_per_unit = deduction_type.charges_per_unit;\n                            }\n                            \n                            // Copy existing data if this is not the new item\n                            if (item_index !== new_item_index) {\n                                let old_row = existing_deductions.find(function(old_row) {\n                                    return old_row.deduction_type === deduction_type.deduction_name && \n                                           (old_row.idx - 1) % (bag_type_count - 1) === (item_index > new_item_index ? item_index - 1 : item_index);\n                                });\n                                \n                                if (old_row) {\n                                    row.bags = old_row.bags;\n                                    row.charges = old_row.charges;\n                                    row.required_value = old_row.required_value;\n                                    row.actual_value = old_row.actual_value;\n                                    row.difference_value = old_row.difference_value;\n                                    row.deduction_amount = old_row.deduction_amount;\n                                }\n                            }\n                        }\n                    });\n                    \n                    // Add single deductions\n                    deduction_types.forEach(function(deduction_type) {\n                        if (deduction_type.deduction_category === 'single') {\n                            let old_row = existing_deductions.find(function(old_row) {\n                                return old_row.deduction_type === deduction_type.deduction_name;\n                            });\n                            \n                            let row = frm.add_child('deductions');\n                            row.deduction_type = deduction_type.deduction_name;\n                            \n                            if (old_row) {\n                                row.bags = old_row.bags;\n                                row.charges = old_row.charges;\n                                row.required_value = old_row.required_value;\n                                row.actual_value = old_row.actual_value;\n                                row.difference_value = old_row.difference_value;\n                                row.deduction_amount = old_row.deduction_amount;\n                            }\n                        }\n                    });\n                    \n                } else {\n                    // Clear and repopulate everything\n                    frm.clear_table('deductions');\n                    deduction_types.forEach(function(deduction_type) {\n                        if (deduction_type.deduction_category === 'multiple') {\n                            for (let i = 0; i < bag_type_count; i++) {\n                                let row = frm.add_child('deductions');\n                                row.deduction_type = deduction_type.deduction_name;\n                                row.required_value = deduction_type.required_value;\n                                row.deduction_category = deduction_type.deduction_category;\n                                if (deduction_type.deduction_name === 'Damage') {\n                                    row.charges_per_unit = deduction_type.charges_per_unit;\n                                }\n                            }\n                        } else if (deduction_type.deduction_category === 'single') {\n                            let row = frm.add_child('deductions');\n                            row.deduction_type = deduction_type.deduction_name;\n                            row.deduction_category = deduction_type.deduction_category;\n                        }\n                    });\n                }\n                \n                frm.refresh_field('deductions');\n            }\n        }\n    });\n}\n\nfunction calculate_deduction_amount(frm, cdt, cdn) {\n   let deduction_row = locals[cdt][cdn];\n   let deduction_idx = deduction_row.idx - 1; // Convert to 0-based index\n   \n   // Get total item details count\n   let item_count = frm.doc.inward_items.length;\n   \n   if (item_count === 0) return;\n   \n   // Calculate which item this deduction maps to\n   let item_index = deduction_idx % item_count;\n   let corresponding_item = frm.doc.inward_items[item_index];\n   \n   if (!corresponding_item) return;\n   \n   let item_gross_weight = corresponding_item.item_gross_weight || 0;\n   let rate = corresponding_item.item_rate || 0;\n   let item_amount = corresponding_item.item_amount || 0;\n   \n   let required = deduction_row.required_value || 0;\n   let actual = deduction_row.actual_value || 0;\n   let difference = actual - required;\n   \n   // Get charges from deduction table itself\n   let charges = deduction_row.charges_per_unit || 0;\n   \n   // Set the difference\n   frappe.model.set_value(cdt, cdn, 'difference_value', difference);\n   \n   // Get deduction type\n   let deduction_type = deduction_row.deduction_type || '';\n   let amount = 0;\n   \n   // Get gross weight from parent Inward doctype\n   let parent_gross_weight = frm.doc.gross_weight || 0;\n   \n   // Calculate amount based on deduction type\n   if (deduction_type.toLowerCase() === 'moise') {\n       // Moise = (diff * item_amount) / 100\n       amount = (difference * item_amount) / 100;\n       \n   } else if (deduction_type.toLowerCase() === 'damage') {\n       // Damage = (diff * charges * gross_weight) / 100\n       // Using charges from deduction table and parent gross_weight\n       amount = (difference * charges * parent_gross_weight) / 100;\n       \n   } else if (deduction_type.toLowerCase() === 's/s') {\n       // S/S = (diff * item_amount) / 100\n       amount = (difference * item_amount) / 100;\n   }\n   \n   // Set the calculated amount\n   frappe.model.set_value(cdt, cdn, 'deduction_amount', amount);\n}\n\n// function to update deduction bags\nfunction update_deduction_bags_for_item(frm, cdt, cdn) {\n \n  let item_row = locals[cdt][cdn];\n  let item_idx = item_row.idx - 1; // Convert to 0-based index\n  let new_bags = item_row.item_bags || 0;\n   \n  // Get total item count\n  let item_count = frm.doc.inward_items.length;\n   \n    // Update all deduction rows that map to this item\n    frm.doc.deductions.forEach(function(deduction_row, deduction_idx) {\n        if (deduction_row.deduction_category === 'multiple') {\n            // Check if this deduction row maps to the changed item\n            let mapped_item_index = deduction_idx % item_count;\n            if (mapped_item_index === item_idx) {\n                // This deduction row corresponds to the changed item\n                frappe.model.set_value(\n                    'Inward Deduction',\n                    deduction_row.name,\n                    'bags',\n                    new_bags\n                );\n            }\n        }\n    });\n\n  frm.refresh_field('Inward Deduction');\n}\n\nfunction remove_mapped_deduction_rows(frm, deleted_item_index) {\n    let item_count = frm.doc.inward_items.length + 1; // +1 because item was just deleted\n    let rows_to_remove = [];\n    \n    // Find all deduction rows that were mapped to the deleted item\n    frm.doc.deductions.forEach(function(deduction_row, deduction_idx) {\n        let mapped_item_index = deduction_idx % item_count;\n        \n        // Delete only if mapped AND NOT \"multiple\"\n        if (mapped_item_index === deleted_item_index && deduction_row.deduction_category !== 'single') {\n            rows_to_remove.push(deduction_row.name);\n        }\n    });\n    \n    // Remove rows in reverse order\n    for (let i = frm.doc.deductions.length - 1; i >= 0; i--) {\n        if (rows_to_remove.includes(frm.doc.deductions[i].name)) {\n            frm.doc.deductions.splice(i, 1);\n        }\n    }\n    \n    // Re-index all remaining rows to reset No. column\n    frm.doc.deductions.forEach(function(row, index) {\n        row.idx = index + 1;\n    });\n    \n    frm.refresh_field('deductions');\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sauda",
  "enabled": 1,
  "modified": "2025-08-19 13:50:22.100595",
  "module": null,
  "name": "Sauda Invoice Number Simple",
  "script": "\nfrappe.ui.form.on('Sauda', {\n    refresh: function(frm) {\n        // Auto-generate for new documents\n        if (frm.is_new() && !frm.doc.sauda_invoice_no) {\n            generate_simple_invoice_number(frm);\n        }\n    },\n    \n    before_save: function(frm) {\n        // Ensure invoice number exists\n        if (!frm.doc.sauda_invoice_no) {\n            generate_simple_invoice_number(frm);\n        }\n    }\n});\n\nfunction generate_simple_invoice_number(frm) {\n    // Get current year\n    let year = new Date().getFullYear();\n    \n    // Get count of existing Saudas this year to determine next number\n    frappe.call({\n        method: 'frappe.client.get_count',\n        args: {\n            doctype: 'Sauda',\n            filters: {\n                creation: ['>=', year + '-01-01'],\n                sauda_invoice_no: ['like', 'INV-S-' + year + '%']\n            }\n        },\n        callback: function(r) {\n            let count = r.message || 0;\n            let next_number = count + 1;\n            let invoice_no = `INV-S-${year}-${String(next_number).padStart(4, '0')}`;\n            \n            // Check if this number already exists\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Sauda',\n                    filters: {\n                        sauda_invoice_no: invoice_no\n                    },\n                    limit: 1\n                },\n                callback: function(check_result) {\n                    if (check_result.message && check_result.message.length > 0) {\n                        // If exists, try next number\n                        invoice_no = `INV-S-${year}-${String(next_number + 1).padStart(4, '0')}`;\n                    }\n                    \n                    frm.set_value('sauda_invoice_no', invoice_no);\n                }\n            });\n        }\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Inward",
  "enabled": 1,
  "modified": "2025-08-19 14:00:56.610515",
  "module": null,
  "name": "Inward Invoice Number Simple",
  "script": "\nfrappe.ui.form.on('Inward', {\n    refresh: function(frm) {\n        // Auto-generate for new documents\n        if (frm.is_new() && !frm.doc.inward_invoice_no) {\n            generate_inward_invoice_number(frm);\n        }\n    },\n    \n    before_save: function(frm) {\n        // Ensure invoice number exists\n        if (!frm.doc.inward_invoice_no) {\n            generate_inward_invoice_number(frm);\n        }\n    }\n});\n\nfunction generate_inward_invoice_number(frm) {\n    // Get current year\n    let year = new Date().getFullYear();\n    \n    // Get count of existing Inwards this year to determine next number\n    frappe.call({\n        method: 'frappe.client.get_count',\n        args: {\n            doctype: 'Inward',\n            filters: {\n                creation: ['>=', year + '-01-01'],\n                inward_invoice_no: ['like', 'INV-I-' + year + '%']\n            }\n        },\n        callback: function(r) {\n            let count = r.message || 0;\n            let next_number = count + 1;\n            let invoice_no = `INV-I-${year}-${String(next_number).padStart(4, '0')}`;\n            \n            // Check if this number already exists\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Inward',\n                    filters: {\n                        inward_invoice_no: invoice_no\n                    },\n                    limit: 1\n                },\n                callback: function(check_result) {\n                    if (check_result.message && check_result.message.length > 0) {\n                        // If exists, try next number\n                        invoice_no = `INV-I-${year}-${String(next_number + 1).padStart(4, '0')}`;\n                    }\n                    \n                    frm.set_value('inward_invoice_no', invoice_no);\n                }\n            });\n        }\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sauda",
  "enabled": 1,
  "modified": "2025-08-21 16:35:10.355046",
  "module": "saudas",
  "name": "Sauda Customer Email Auto-fill",
  "script": "frappe.ui.form.on('Sauda', {\n    customer: function(frm) {\n        if (frm.doc.customer) {\n            frappe.call({\n                method: \"frappe.client.get_value\",\n                args: {\n                    doctype: \"Customer\",\n                    filters: { name: frm.doc.customer },\n                    fieldname: \"email\" \n                },\n                callback: function(r) {\n                    if (r.message && r.message.email) {\n                        frm.set_value('customer_email', r.message.email);\n                    } else {\n                        frm.set_value('customer_email', '');\n                    }\n                }\n            });\n        } else {\n            frm.set_value('customer_email', '');\n        }\n    }\n});\n",
  "view": "Form"
 }
]