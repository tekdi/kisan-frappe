[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Inward",
  "enabled": 1,
  "modified": "2025-07-22 17:43:03.548423",
  "module": "inwards",
  "name": "Inward Deduction - Populate Deduction Types",
  "script": "frappe.ui.form.on('Inward', {\n    refresh: function(frm) {\n        setup_deduction_types(frm);\n    }\n});\n\nfrappe.ui.form.on('Inward Deduction', {\n    deductions_add: function(frm, cdt, cdn) {\n        setup_deduction_types(frm);\n    },\n    \n    deduction_type: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.deduction_type) {\n            frappe.call({\n                method: 'frappe.desk.form.load.getdoc',\n                args: {\n                    doctype: 'App Settings',\n                    name: 'App Settings'\n                },\n                callback: function(r) {\n                    if (r.docs && r.docs[0] && r.docs[0].default_deduction_types) {\n                        r.docs[0].default_deduction_types.forEach(function(settings_row) {\n                            if (settings_row.deduction_name === row.deduction_type && settings_row.is_active) {\n                                frappe.model.set_value(cdt, cdn, 'amount', settings_row.default_amount || 0);\n                                frappe.model.set_value(cdt, cdn, 'description', settings_row.description || '');\n                            }\n                        });\n                    }\n                }\n            });\n        }\n    }\n});\n\nfunction setup_deduction_types(frm) {\n    frappe.call({\n        method: 'frappe.desk.form.load.getdoc',\n        args: {\n            doctype: 'App Settings',\n            name: 'App Settings'\n        },\n        callback: function(r) {\n            if (r.docs && r.docs[0] && r.docs[0].default_deduction_types) {\n                let options = [];\n                r.docs[0].default_deduction_types.forEach(function(row) {\n                    if (row.is_active) {\n                        options.push(row.deduction_name);\n                    }\n                });\n                \n                if (options.length > 0) {\n                    frm.fields_dict.deductions.grid.update_docfield_property('deduction_type', 'options', options.join('\\n'));\n                    frm.fields_dict.deductions.grid.refresh();\n                }\n            }\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sauda",
  "enabled": 1,
  "modified": "2025-07-26 16:19:56.333171",
  "module": null,
  "name": "Sauda-Basic-Calculation",
  "script": "frappe.ui.form.on('Sauda', {\n    refresh: function(frm) {\n        calculate_pending_values(frm);\n    },\n    \n    validate: function(frm) {\n        // Client-side validation before save/submit\n        validate_required_values(frm);\n    },\n    \n    expected_quantity: function(frm) {\n        calculate_total_amount(frm);\n        calculate_pending_values(frm);\n    },\n    \n    sauda_rate: function(frm) {\n        calculate_total_amount(frm);\n        calculate_pending_values(frm);\n    },\n    \n    total_amount: function(frm) {\n        calculate_pending_values(frm);\n    },\n    \n    booking_date: function(frm) {\n        calculate_dates(frm);\n    },\n    \n    delivery_duration: function(frm) {\n        calculate_dates(frm);\n    },\n    \n    payment_duration: function(frm) {\n        calculate_dates(frm);\n    }\n});\n\nfunction validate_required_values(frm) {\n    // Prevent submission with zero or invalid values\n    if (!frm.doc.expected_quantity || frm.doc.expected_quantity <= 0) {\n        frappe.throw(__(\"Expected Quantity must be greater than 0\"));\n        return false;\n    }\n    \n    if (!frm.doc.sauda_rate || frm.doc.sauda_rate <= 0) {\n        frappe.throw(__(\"Sauda Rate must be greater than 0\"));\n        return false;\n    }\n    \n    if (!frm.doc.delivery_duration || frm.doc.delivery_duration <= 0) {\n        frappe.throw(__(\"Delivery Duration must be greater than 0\"));\n        return false;\n    }\n    \n    if (!frm.doc.payment_duration || frm.doc.payment_duration <= 0) {\n        frappe.throw(__(\"Payment Duration must be greater than 0\"));\n        return false;\n    }\n    \n    return true;\n}\n\nfunction calculate_total_amount(frm) {\n    if (frm.doc.expected_quantity >= 0 && frm.doc.sauda_rate >= 0) {\n        let total = frm.doc.expected_quantity * frm.doc.sauda_rate;\n        frm.set_value('total_amount', total);\n    }\n}\n\nfunction calculate_dates(frm) {\n    let booking_date = frm.doc.booking_date;\n    let delivery_duration = frm.doc.delivery_duration;\n    let payment_duration = frm.doc.payment_duration;\n    \n    if (booking_date) {\n        if (delivery_duration > 0) {\n            let delivery_end_date = frappe.datetime.add_days(booking_date, delivery_duration);\n            frm.set_value('delivery_end_date', delivery_end_date);\n        }\n        \n        if (payment_duration > 0) {\n            let payment_end_date = frappe.datetime.add_days(booking_date, payment_duration);\n            frm.set_value('payment_end_date', payment_end_date);\n        }\n    }\n}\n\nfunction calculate_pending_values(frm) {\n    let is_editable = frm.is_new() || frm.doc.docstatus == 0;\n    \n    if (frm.doc.expected_quantity >= 0 && is_editable) {\n        frm.set_value('pending_quantity', frm.doc.expected_quantity);\n    }\n    \n    if (frm.doc.total_amount >= 0 && is_editable) {\n        frm.set_value('pending_total_amount', frm.doc.total_amount);\n    }\n    \n    frm.refresh_fields(['pending_quantity', 'pending_total_amount']);\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Inward",
  "enabled": 1,
  "modified": "2025-07-30 15:28:45.461167",
  "module": null,
  "name": "Inward Item Amount Calculation",
  "script": "\n// Auto-populate fields when Sauda is selected\nfrappe.ui.form.on('Inward', {\n    sauda: function(frm) {\n        if (frm.doc.sauda) {\n            // Fetch Sauda document and populate fields\n            frappe.db.get_doc('Sauda', frm.doc.sauda).then(function(sauda_doc) {\n                frm.set_value('customer', sauda_doc.customer);\n                frm.set_value('warehouse', sauda_doc.warehouse);\n                frm.set_value('product', sauda_doc.product);\n                frm.set_value('broker', sauda_doc.broker);\n            });\n        } else {\n            // Clear fields if Sauda is cleared\n            frm.set_value('customer', '');\n            frm.set_value('warehouse', '');\n            frm.set_value('product', '');\n            frm.set_value('broker', '');\n        }\n    },\n    \n    cgst_percent: function(frm) {\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    sgst_percent: function(frm) {\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    igst_percent: function(frm) {\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    tcs_percent: function(frm) {\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    tds_percent: function(frm) {\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    broker_commission_percent: function(frm) {\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    }\n});\n\n// Calculate item_amount for each row in inward_items child table\nfrappe.ui.form.on('Inward Item Detail', {\n    item_arrival_weight: function(frm, cdt, cdn) {\n        calculate_item_amount(frm, cdt, cdn);\n        calculate_parent_totals(frm);\n        calculate_financial_totals(frm);\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    item_rate: function(frm, cdt, cdn) {\n        calculate_item_amount(frm, cdt, cdn);\n        calculate_parent_totals(frm);\n        calculate_financial_totals(frm);\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    item_gross_weight: function(frm, cdt, cdn) {\n        calculate_parent_totals(frm);\n        calculate_financial_totals(frm);\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    bags: function(frm, cdt, cdn) {\n        calculate_parent_totals(frm);\n    },\n    \n    // Trigger when rows are added or removed\n    inward_items_add: function(frm, cdt, cdn) {\n        calculate_parent_totals(frm);\n        calculate_financial_totals(frm);\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    inward_items_remove: function(frm, cdt, cdn) {\n        calculate_parent_totals(frm);\n        calculate_financial_totals(frm);\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    }\n});\n\n// Calculate deductions when deductions child table changes\nfrappe.ui.form.on('Inward Deduction', {\n    amount: function(frm, cdt, cdn) {\n        calculate_deduction_totals(frm);\n        calculate_financial_totals(frm);\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    // Trigger when deduction rows are added or removed\n    deductions_add: function(frm, cdt, cdn) {\n        calculate_deduction_totals(frm);\n        calculate_financial_totals(frm);\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    },\n    \n    deductions_remove: function(frm, cdt, cdn) {\n        calculate_deduction_totals(frm);\n        calculate_financial_totals(frm);\n        calculate_tax_totals(frm);\n        calculate_net_total(frm);\n    }\n});\n\nfunction calculate_item_amount(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n    \n    // Get values, default to 0 if empty\n    let arrival_weight = flt(row.item_arrival_weight) || 0;\n    let rate = flt(row.item_rate) || 0;\n    \n    // Calculate: item_amount = (item_arrival_weight / 100) Ã— item_rate\n    let item_amount = (arrival_weight / 100) * rate;\n    \n    // Set the calculated value\n    frappe.model.set_value(cdt, cdn, 'item_amount', item_amount);\n    \n    // Refresh the field to show updated value\n    frm.refresh_field('inward_items');\n}\n\nfunction calculate_parent_totals(frm) {\n    let total_gross_weight = 0;\n    let total_bags = 0;\n    let total_arrival_weight = 0;\n    let total_amount = 0;\n    \n    // Loop through all rows in inward_items child table\n    if (frm.doc.inward_items) {\n        frm.doc.inward_items.forEach(function(row) {\n            total_gross_weight += flt(row.item_gross_weight) || 0;\n            total_bags += flt(row.bags) || 0;\n            total_arrival_weight += flt(row.item_arrival_weight) || 0;\n            total_amount += flt(row.item_amount) || 0;\n        });\n    }\n    \n    // Set parent totals\n    frm.set_value('total_gross_weight', total_gross_weight);\n    frm.set_value('total_bags', total_bags);\n    frm.set_value('total_arrival_weight', total_arrival_weight);\n    frm.set_value('total_amount', total_amount);\n}\n\nfunction calculate_deduction_totals(frm) {\n    let total_deductions = 0;\n    \n    // Loop through all rows in deductions child table\n    if (frm.doc.deductions) {\n        frm.doc.deductions.forEach(function(row) {\n            total_deductions += flt(row.amount) || 0;\n        });\n    }\n    \n    // Set total deductions\n    frm.set_value('total_deductions', total_deductions);\n}\n\nfunction calculate_financial_totals(frm) {\n    let total_amount = flt(frm.doc.total_amount) || 0;\n    let total_deductions = flt(frm.doc.total_deductions) || 0;\n    \n    // Calculate sub_total = total_amount - total_deductions\n    let sub_total = total_amount - total_deductions;\n    \n    // Set sub total\n    frm.set_value('sub_total', sub_total);\n}\n\nfunction calculate_tax_totals(frm) {\n    let sub_total = flt(frm.doc.sub_total) || 0;\n    \n    // Get tax percentages\n    let cgst_percent = flt(frm.doc.cgst_percent) || 0;\n    let sgst_percent = flt(frm.doc.sgst_percent) || 0;\n    let igst_percent = flt(frm.doc.igst_percent) || 0;\n    let tcs_percent = flt(frm.doc.tcs_percent) || 0;\n    let tds_percent = flt(frm.doc.tds_percent) || 0;\n    let broker_commission_percent = flt(frm.doc.broker_commission_percent) || 0;\n    \n    // Calculate tax amounts\n    let total_gst_amount = sub_total * (cgst_percent + sgst_percent + igst_percent) / 100;\n    let tcs_amount = sub_total * tcs_percent / 100;\n    let tds_amount = sub_total * tds_percent / 100;\n    let broker_commission_amount = sub_total * broker_commission_percent / 100;\n    \n    // Set tax amounts\n    frm.set_value('total_gst_amount', total_gst_amount);\n    frm.set_value('tcs_amount', tcs_amount);\n    frm.set_value('tds_amount', tds_amount);\n    frm.set_value('broker_commission_amount', broker_commission_amount);\n}\n\nfunction calculate_net_total(frm) {\n    let sub_total = flt(frm.doc.sub_total) || 0;\n    let total_gst_amount = flt(frm.doc.total_gst_amount) || 0;\n    let tcs_amount = flt(frm.doc.tcs_amount) || 0;\n    let tds_amount = flt(frm.doc.tds_amount) || 0;\n    \n    // Calculate net_total = sub_total + total_gst_amount + tcs_amount - tds_amount\n    let net_total = sub_total + total_gst_amount + tcs_amount - tds_amount;\n    \n    // Set net total\n    frm.set_value('net_total', net_total);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Inward",
  "enabled": 1,
  "modified": "2025-07-30 20:52:23.990105",
  "module": null,
  "name": "Inward Deduction Auto-calculations",
  "script": "\nfrappe.ui.form.on('Inward', {\n    refresh: function(frm) {\n        set_deduction_options(frm);\n    },\n    \n    onload: function(frm) {\n        set_deduction_options(frm);\n    }\n});\n\nfrappe.ui.form.on('Inward Deduction', {\n    deduction_type: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        \n        if (row.deduction_type) {\n            fetch_master_values(frm, cdt, cdn, row.deduction_type);\n        }\n    },\n    \n    actual_value: function(frm, cdt, cdn) {\n        calculate_amounts(frm, cdt, cdn);\n        calculate_total_deductions(frm);\n        // Trigger existing sub_total calculation\n        calculate_financial_totals(frm);\n    },\n    \n    required_value: function(frm, cdt, cdn) {\n        calculate_amounts(frm, cdt, cdn);\n        calculate_total_deductions(frm);\n        calculate_financial_totals(frm);\n    },\n    \n    charges_per_unit: function(frm, cdt, cdn) {\n        calculate_amounts(frm, cdt, cdn);\n        calculate_total_deductions(frm);\n        calculate_financial_totals(frm);\n    },\n    \n    deduction_amount: function(frm, cdt, cdn) {\n        calculate_total_deductions(frm);\n        calculate_financial_totals(frm);\n    },\n    \n    deductions_add: function(frm) {\n        // Delay to ensure row is added\n        setTimeout(() => {\n            set_deduction_options(frm);\n            calculate_total_deductions(frm);\n            calculate_financial_totals(frm);\n        }, 100);\n    },\n    \n    deductions_remove: function(frm) {\n        setTimeout(() => {\n            calculate_total_deductions(frm);\n            calculate_financial_totals(frm);\n        }, 100);\n    }\n});\n\nfunction set_deduction_options(frm) {\n    frappe.call({\n        method: 'frappe.desk.form.load.getdoc',\n        args: {\n            doctype: 'App Settings',\n            name: 'App Settings'\n        },\n        callback: function(r) {\n            if (r.docs && r.docs[0] && r.docs[0].default_deduction_types) {\n                let types = r.docs[0].default_deduction_types.filter(t => t.is_active === 1);\n                let options = types.map(t => t.deduction_name);\n                \n                // Safer option setting\n                try {\n                    if (frm.fields_dict.deductions && \n                        frm.fields_dict.deductions.grid && \n                        frm.fields_dict.deductions.grid.get_field('deduction_type')) {\n                        \n                        frm.fields_dict.deductions.grid.get_field('deduction_type').df.options = options.join('\\n');\n                        frm.refresh_field('deductions');\n                    }\n                } catch(e) {\n                    console.log('Note: Deduction field not ready yet');\n                }\n            }\n        }\n    });\n}\n\nfunction fetch_master_values(frm, cdt, cdn, deduction_type) {\n    frappe.call({\n        method: 'frappe.desk.form.load.getdoc',\n        args: {\n            doctype: 'App Settings',\n            name: 'App Settings'\n        },\n        callback: function(r) {\n            if (r.docs && r.docs[0] && r.docs[0].default_deduction_types) {\n                let selected = r.docs[0].default_deduction_types.find(\n                    t => t.deduction_name === deduction_type && t.is_active === 1\n                );\n                \n                if (selected) {\n                    frappe.model.set_value(cdt, cdn, 'required_value', selected.required_value || 0);\n                    frappe.model.set_value(cdt, cdn, 'charges_per_unit', selected.charges_per_unit || 0);\n                    \n                    let row = locals[cdt][cdn];\n                    if (row.actual_value) {\n                        calculate_amounts(frm, cdt, cdn);\n                    }\n                    calculate_total_deductions(frm);\n                    calculate_financial_totals(frm);\n                }\n            }\n        }\n    });\n}\n\nfunction calculate_amounts(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n    \n    if (row.actual_value >= 0 && row.required_value >= 0 && row.charges_per_unit >= 0) {\n        let difference = 0;\n        let amount = 0;\n        \n        if (flt(row.actual_value) > flt(row.required_value)) {\n            difference = flt(row.actual_value) - flt(row.required_value);\n            amount = difference * flt(row.charges_per_unit);\n        }\n        \n        frappe.model.set_value(cdt, cdn, 'difference_value', difference);\n        frappe.model.set_value(cdt, cdn, 'deduction_amount', amount);\n    }\n}\n\nfunction calculate_total_deductions(frm) {\n    let total = 0;\n    \n    if (frm.doc.deductions) {\n        frm.doc.deductions.forEach(function(row) {\n            total += flt(row.deduction_amount) || 0;\n        });\n    }\n    \n    frm.set_value('total_deductions', total);\n}\n\n// Make functions available to other scripts\nwindow.calculate_financial_totals = function(frm) {\n    let total_amount = flt(frm.doc.total_amount) || 0;\n    let total_deductions = flt(frm.doc.total_deductions) || 0;\n    \n    let sub_total = total_amount - total_deductions;\n    frm.set_value('sub_total', sub_total);\n};\n",
  "view": "Form"
 }
]